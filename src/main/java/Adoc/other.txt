------------------------------------------------------------------------------------------
1.Spring事务管理：
    1.事物的使用
        ·@Transactional--可定义在类上
        ·统一配置事务管理器（tx:）
    2.事物的传播行为：@Transactional(propagation=Propagation.(...))
        ·required:          有事物加入，没有新建---默认
        ·not_supported:     为此方法不开启事务
        ·requires_new:      不管原来是否有事物，都新建事物并先执行，完毕后再执行老事物
        ·mandatory：        必须在已有事物中执行，否则抛出异常
        ·never：            必须在没有事物中执行，否则抛出异常
        ·supports：         其他bean掉此方法，若其有事物，则此有事物，反之亦然
    3.超时时间：@Transactional(timeout=30) 默认30秒
    4.错误回滚：
        ·spring管理器并不会回滚所有异常：遇到需要捕获的异常不会回滚(throws new Exception("回滚"))
        ·想所有异常都回滚：@Transactional(rollbackFor=Exception.class)
    5.事物的隔离级别：
        ·读未提交：读到未提交数据(不可重复读/脏读)--基本不使用
        ·读已提交：读已提交数据(不可重复读/幻读)
            -不可重复读：同一事物，多次读取同一数据，返回结果不同
            -幻读：一个事物读到另一个事物已提交的insert数据
        ·可重复读：可重复读(幻读)
        ·序列化：串行化
        mysql默认：可重复读
        sqlserver:读已提交
——————————————————————————
2.hibernate和mybatis的比较：orm框架
    ·sql封装：
        hibernate对sql进行完整封装，是程序员专注于业务
        mybatis：sql-mapping映射
    ·sql优化：
        hibernate：会查询全部字段，可优化，但会破坏其简洁性
        mybatis：优化方便
    ·数据库移植性：
        hibernate：使用hql语句，与具体使用的数据库无关，可移植性较好
        mybatis：sql自写，移植性差
    ·缓存支持：
        hibernate：一级缓存：session 二级缓存sessionFactory
        mybatis：二级缓存
    ·自定义orm框架：类的属性名注解+反射+模板模式+自定义数据库连接池
 ——————————————————————————
3.structs2和springmvc比较：
    ·structs2：类级别拦截--action级别--一个类对应一个request上下文
    ·springmvc：方法级别上的拦截--一个方法对应一个request上下文
 ——————————————————————————
 ——————————————————————————————————————————————————————————————
 java消息中间件：--用来处理异步消息
  ·消息发布者----公众号----推送给订阅公众号的所有人
  ·通过服务调用让其他系统感知事件发生：场景如下
     -用户登录--登录系统：
         -调用服务 短信
         -调用服务 积分
         -调用服务 日志...
  ·通过消息中间件解耦服务调用：
     -用户登录--登录系统--发送消息到=消息中间件-异步向以下服务投递消息：
         -调用服务 短信
         -调用服务 积分
         -调用服务 日志...
  ·使用优点：
     -系统解耦
     -异步
     -横向扩展
     -安全可靠
     -顺序保证
  ·中间件：不能直接给用户使用，不能诶客户带来直接价值的软件。
  ·消息中间件：关注于数据的发送和接收，利用高效可靠的异步消息传递机制集成分布式系统
  ·JMS规范(java message service)：java消息必选课程
     -是一个java平台关于面向消息中间件的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通讯
  ·AMQP(advanced message queuing protocol)：一个提供统一消息服务的应用层标准协议，基于此协议的客户端与消息中间件可传递消息，并不受客户端
     /中间件不同产品，不同开发语言等条件的限制。
 ——————————————————————————————————————————————————————————————
 JMS和AMQP的对比：
      --                       JMS                               AMQP
     定义                      Java api                        wire-protocol
     跨语言                    否                               是
     消息类型                  提供两种消息模型p2p,pub/sub         提供五种消息模型：direct/fanout/topic/headers/system
     消息类型             TextMessage/MapMessage/BytesMessage   byte[]
                         StreamMessage/ObjectMessage/Message
     综合评价：
         --JMS定义了java api层面的标准，在java体系中，多个client均可以通过JMS进行交互，不需要应用修改代码，但是其对跨平台支持较差
         --Amqp的主要特征是面向消息，队列，路由（包括点对点和发布订阅），可靠性，安全
 ——————————————————————————————————————————————————————————————
 常见消息中间件对比：
     -ActiveMQ:java优先（也支持AMQP协议，XMPP，Stomp，OpenWire）
         -Apache出品，最流行，能力强的开源总线
         -完全支持JMS1.1和j2ee 1.4规范的JMS Provider的实现
         -特性：
             ·支持多种语言和协议编写客户端
             ·完全支持JMS1.1和j2ee 1.4规范（持久化，XA消息，事务）
             ·虚拟主题，组合目的，队列镜像
         -优点：
             ·遵循JMS规范
             ·安装部署方便
         -缺点：
             ·据用户反馈会莫名丢失消息
             ·目前重心在下代产品apolle上，目前社区不活跃，对5.X的维护较少
         -使用场景：
             .适合中小企业级消息应用场景，不适合上千个队列的应用场景


     --RabbitMQ:语言无关
         -开源的AMQP实现，服务端用语言Erlang语言编写
         -用于在分布式系统中，存储转发消息，在易用性，拓展性，高可用等方便表现不俗
         -特性
             ·支持多种客户端
             ·AMQP的完整实现
             ·事务支持、发布确认
             ·消息持久化
         -优点：
             ·继承Erlang天生的并发性
             ·最初用于金融业，稳定性，安全性有保障
         -缺点：
             ·Erlang语言难度较大
             ·不支持动态扩展
         -使用场景：
             ·适合对稳定性要求高的企业级应用
     --Kafka：java优先（不是一个严格的消息中间件，本身是用来做日志储存的）
         -高吞吐量的分布式发布订阅消息系统
         -分布式，分区的，可靠的分布式日志存储服务
         -特性：
             -通过O(1)-时间复杂度，的磁盘数据结构提供消息的持久化
             -此结构对于以TB的消息存储也能够保持长时间的稳定性能
             -高吞吐量：非常普通的硬件Kfaka也可以支持每秒数百万的消息
             -分区，分组
         -优点：
             ·依赖zk，可动态拓展及诶单
             ·高性能，高吞吐，无限扩容，消息可指定追溯
         -缺点：
             ·严格的顺序机制，不支持消息优先级
             ·不支持标准消息协议
             ·不利于平台迁移
         -使用场景：
             ·一般用在发数据日志处理或对实时性(少量延迟)，可靠性（少量丢数据）要求稍低的场景使用
 ——————————————————————————————————————————————————————————————
 JMS规范：
     ·提供者：实现JMS规范的消息中间件服务器 -提供服务的服务商
     ·客户端：发送或接收消息的应用程序      -主要开发此部分
     ·生产者/发布者：创建并发送消息的客户端
     ·消费者/订阅者：接收并处理消息的客户端
     ·消息：应用程序间传递的数据内容
     ·消息模式：在客户端之间传递消息的方式，JMS定义了主题和队列两种模式
 消息模式：
     -队列模型：
         ·客户端包括生产者和消费者
         ·队列中的消息只能被一个消费者消费
         ·消费者可以随时消费队列中的消息
     -主题模型：
         ·客户端包括发布者和订阅者
         ·主题中的消息被所有的订阅者消费
         ·消费者不能消费订阅之前就发送的消息


 ———————————————————————————————————————————————————————————————
 windows安装ActiveMQ：
     ·下载安装
     ·直接启动和服务启动
     ·下载地址:http://activemq.apache.org/activemq-5153-release.html
     ·解压进入G:\activeMp\apache-activemq-5.15.3-bin\apache-activemq-5.15.3\bin\win64
     ·启动：
         -以管理员身份运行(右击)：activemq.bat --以此种方式运行不能关闭黑窗口
         -以服务方式启动：
             ·以管理员身份运行：InstallService.bat
             ·在【服务】中找到ActiveMQ点击启动(也可设置为开机自启)：
                 -报错：1067
                     1.修改G:\activeMp\apache-activemq-5.15.3-bin\apache-activemq-5.15.3\bin\win64下的wrapper.conf
                         wrapper.java.command=G:/aaaJDK1.8/bin/java
                 -报错： Unsupported major.minor version 52.0
                     1.指的是jdk版本与此不匹配（建议使用jdk1.8）
     ·以运行结果显示的访问地址，访问主界面 默认用户密码：admin/admin
 ———————————————————————————————————————————————————————————————
 linux安装ActiveMQ：
     ·wget http://mirror.bit.edu.cn/apache//activemq/5.15.3/apache-activemq-5.15.3-bin.tar.gz
     ·tar -zxvf apache-activemq-5.15.3-bin.tar.gz
     ·进入bin目录
     ·./activemq start
     ·ps -ef |grep activemq
     ·./activemq stop
 ———————————————————————————————————————————————————————————————
 端口问题：
     -8161是后台管理系统:位置activemq/conf/jetty.xml
     -61616是给java用的tcp端口：位置conf/activemq.xml
 ———————————————————————————————————————————————————————————————
 spring-jms连接activemq:
     -ConnectionFactory:管理连接的连接工厂
         -spring提供的连接池：原因-
             JmsTemplate每次发消息都会重新创建连接，会话和productor。很耗性能，所以创建连接池
         -两种连接池：
             -SingleConnectionFactory:
                 应用只会产生一个连接
             -CachingConnectionFactory：继承SingleConnectionFactory
                 相比以上，增加了缓存功能
     -JmsTemplate：用于发送和接受消息的模板类
         -向spring容器注册即可使用
         -线程安全，用于整个应用，可创建多个
     -MessageListerner：消息监听器
         -实现onMessage方法，该方法只接受一个Message参数










































