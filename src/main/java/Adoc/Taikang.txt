-------------------------------------------
1.http介绍,httpclient介绍
    1.超文本传输协议
    2.基于tcp/ip协议传输数据，基于客户端-服务端工作
    3.默认端口：80


2.ftp默认端口:21
    ·文件传输协议
    ·匿名和授权两种方式
    ·ftp服务器util编写

3.项目描述—移动对接：
    ·以甘肃为例：
    ·身份声明：
      甲方：移动
      乙方：联创，学酷
      两个系统的兼容对接方案
     ·接口设计：
        1.考虑到多方平台的个性化差异需求，使用抽象组件方式进行平台各异化的开发，互不影响
        2.考虑到用户行为导致的操作并发性，为降低应用服务器压力，故配置服务器三台，nginx反向代理
        3.为降低数据库压力，采用读写分离技术，并统一对service层进行事物控制
        4.为统一接口格式，对服务全局异常，以及接口返回值进行统一定义
        5.考虑到平台的多复用性，将数据库配置信息统一移植tomcat-context.xml进行统一配置
        6.考虑到编程语言的差异性，及传输数据的大小，采用跨平台数据格式json
        7.基于项目分组形式，采用maven进行管理，与整个平台风格保持一致
     ·cmpp短信对接：
        ·接口设计：
            1.队列设计：--无界队列
                ·优先级高的-
                ·优先级低的-
            2.接口设计：
                ·将接收到的短信详情(包含该条短信发送失败的次数)推送set至优先级高的无界队列
                ·存表记录短信推送（生成序列id）
            3.在服务器开启时，启动守护线程，不断监控两个队列，有值则推，失败则set到优先级低的队列，满三次存表移除
            4.服务器短信发送，异步获取发送短信回执（序列id作为标识），插表记录回执状态，并修改推送记录表
            5.短信补发机制：接口开发
            6.实时查询短信队列所含待发送短信个数
     ·业务支撑平台：
        ·用于客服处理用户数据对接中的问题
        ·用户进行用户第三方录入功能
        ·用于统计数据(dba聚合的统计表)--上交移动
        ·采用线程本地环境进行数据源切换
        ·远程服务器文件上传错误数据给合作平台，进行错误数据处理

4.spring启动时加载哪些bean



5.restful接口与webservice接口的区别
    1.restful接口，利用http协议做传输协议(而非一开始的初衷应用层协议)
    2.webservice基于soap协议，，SOAP消息完全就是将Http协议作为消息承载，
      以至于对于Http协议中的各种参数（例如编码，错误码等）都置之不顾
    3.RESTful 简化了 web service 的设计，它不再需要 wsdl ，也不再需要 soap 协议，
      而是通过最简单的 http 协议传输数据 ( 包括 xml 或 json) 。
      既简化了设计，也减少了网络传输量（因为只传输代表数据的 xml 或 json ，没有额外的 xml 包装）。
    4.xml和json是跨平台的数据，各种语言均可解析

6.为什么使用json数据格式传递数据，与xml有什么区别
    1.json更轻量，易于阅读和编写
    2.xml重量，主要体现在解析上
    3.综合选择;大数据传输解析使用xml，小数据量传输使用json

7.对接用的token怎么使用，什么机制：绑定到人的访问令牌
    1.对接外系统：根据用户授权获取用户token，有效期3月，可实现自动续期
    2.对接内系统：前后台分离时，--此token存放于redis，保留在当前会话中
        ·前台登录验证，后台校验成功返回token
        ·客户端收到数据保存token
        ·客户端每次访问API是携带Token到服务器端
        ·服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码


8.前后台分离项目怎么进行session共享



9.redis数据存储格式：
    1.redis简介：
    	--数据结构服务器：value可以是字符串(String),哈希(Map),列表(list),集合(sets)和有序集合(sorted sets)等类型
    	--key-value存储系统：REmote DIctionary Server。
    	--是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。
    -------------------------------------------------
    2.redis的特点:(Redis 与其他 key - value 缓存产品区别)
     	--Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。
    	--Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。
    	--Redis支持数据的备份，即master-slave模式的数据备份
    -------------------------------------------------
    3.redis优势：
    	--读写性能极高：    读-110000次/s,写-81000次/s
    	--支持多种数据类型：支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作
    	--原子性：	    即事务性，要么执行要么都不执行
    	--很多拓展特性：    Redis还支持 publish/subscribe, 通知, key 过期等等特性。
      缺点：
    	--（1）单线程
    	  （2）耗内存
    -------------------------------------------------
    4.Redis与其他key-value存储有什么不同？
    	--1.支持原子性操作（事务）
    	--2.运行在内存中，但可持久化到磁盘（因此要权衡数据量不能大于硬件内存）
    	--3.内存中操作复杂数据结构，相比于磁盘中效率要高很多
    	--4.磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。
    -------------------------------------------------
    5.BSD协议：
    	--1.代码开源
    	--2.可进行二次开发
    	--3.注明原作者BSD协议
    1.redis数据类型：
    	--Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。
    	-------------
    	string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。
    	string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。
    	string类型是Redis最基本的数据类型，一个键最大能存储512MB。
    默认端口：6379
    resp协议--一个基于tcp的应用层协议
    redis存放string二进制安全


10.对接机制：
    1.第三方对接中央平台：
       1.应用对接：
            ·第三方申请创建应用,提供该应用的 APP_ID和APP_KEY
            ·调试，审核，上线
       2.第三方调用规范：
            ·第三方发起请求：带access token和open_id参数，并以appkey作为密钥加密请求;
            ·中央平台向第三方发起请求不做加密
            ·所有请求都需要增加state参数，参数值为随机数
            ·所求请求都需要有签名参数sig
            ·流程中所有参数都必须通过URLEncoder处理后传递
            ·错误出现：双方定义错误返回
       3.中央平台访问第三方平台的两种方式：
            ·首次访问：
            ·非首次访问：访问成功并绑定账号到第三方应用
       4.用户首次访问中央平台上第三方应用的流程：
            ·用户首次访问中央平台上第三方应用logo
            ·由于第一次访问，所以要将该用户绑定到第三方应用中
            ·具体流程：
                1.用户--点击第三方应用：--判断用户是否已经绑定到第三方应用
                    ·已绑定：
                    ·未绑定：--返回用户授权页面--请用户授权--确定授权(获取code，十分钟有效)
                2.通过回调地址将code传递给第三方应用
                3.第三方应用带code访问中央平台
                4.中央平台生成access-token,open_id并绑定应用，记录授权信息
                5.中央平台反馈access-token,open_id給第三方平台
                6.进行用户绑定
            ·以上绑定流程的简化步骤：
                1.获取Authorization Code(用户授权码)
                2.通过Authorization Code获取Access Token和open_id
            ·第三方接入流程：
                1.中央平台带code回调第三方应用
                2.第三方带code+接入成功的appId+sig+随机数访问中央平台获取token(有效期expires_in)+open_id
                  当expires_in<=0是调用权限续期接口刷新token
       5.用户已绑定账号访问第三方应用的流程：
            ·已绑定账号，再次访问第三方应用时，将传递access_token+openid，第三方自动匹配用户
            ·权限续期同上
       6.第三方平台用户绑定到中央平台(------暂不调试)：
            ·自有用户登录访问中央平台logo进行用户绑定到中央平台
       7.手机端访问第三方应用平台流程：
            1.用户登录中央平台--->中央平台返回应用数据列表--->用户点击第三方应用
            2.中央平台带token访问第三方应用---->第三方应用解密token并绑定使用

       8.H5登录授权接口
       9.登录授权接口

































